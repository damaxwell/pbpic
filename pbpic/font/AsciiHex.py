import codecs

HexTable = [
'00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '0A', '0B', '0C', '0D', '0E', '0F',  
'10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '1A', '1B', '1C', '1D', '1E', '1F',  
'20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '2A', '2B', '2C', '2D', '2E', '2F',  
'30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '3A', '3B', '3C', '3D', '3E', '3F',  
'40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '4A', '4B', '4C', '4D', '4E', '4F',  
'50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '5A', '5B', '5C', '5D', '5E', '5F',  
'60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '6A', '6B', '6C', '6D', '6E', '6F',  
'70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '7A', '7B', '7C', '7D', '7E', '7F',  
'80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '8A', '8B', '8C', '8D', '8E', '8F',  
'90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '9A', '9B', '9C', '9D', '9E', '9F',  
'A0', 'A1', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'A9', 'AA', 'AB', 'AC', 'AD', 'AE', 'AF',  
'B0', 'B1', 'B2', 'B3', 'B4', 'B5', 'B6', 'B7', 'B8', 'B9', 'BA', 'BB', 'BC', 'BD', 'BE', 'BF',  
'C0', 'C1', 'C2', 'C3', 'C4', 'C5', 'C6', 'C7', 'C8', 'C9', 'CA', 'CB', 'CC', 'CD', 'CE', 'CF',  
'D0', 'D1', 'D2', 'D3', 'D4', 'D5', 'D6', 'D7', 'D8', 'D9', 'DA', 'DB', 'DC', 'DD', 'DE', 'DF',  
'E0', 'E1', 'E2', 'E3', 'E4', 'E5', 'E6', 'E7', 'E8', 'E9', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF',  
'F0', 'F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'FA', 'FB', 'FC', 'FD', 'FE', 'FF' ];

CharTable = [ chr(d) for d in range( 256 ) ]

HtoA_Whitespace = -1
HtoA_Error = -3
HtoA_FirstChar = [
        -1, -3, -3, -3, -3, -3, -3, -3, -3, -1, -1, -3, -1, -1, -3, -3,
        -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
        -1, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
        0, 16, 32, 48, 64, 80, 96, 112, 128, 144, -3, -3, -3, -3, -2, -3,
        -3, 160, 176, 192, 208, 224, 240, -3, -3, -3, -3, -3, -3, -3, -3, -3,
        -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
        -3, 160, 176, 192, 208, 224, 240, -3, -3, -3, -3, -3, -3, -3, -3, -3,
        -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
        -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
        -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
        -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
        -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
        -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
        -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
        -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
        -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3
]

HtoA_SecondChar = [
        -1, -3, -3, -3, -3, -3, -3, -3, -3, -1, -1, -3, -1, -1, -3, -3,
        -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
        -1, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
         0,  1,  2,  3,  4,  5,  6,  7,  8,  9, -3, -3, -3, -3, -2, -3,
        -3, 10, 11, 12, 13, 14, 15, -3, -3, -3, -3, -3, -3, -3, -3, -3,
        -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
        -3, 10, 11, 12, 13, 14, 15, -3, -3, -3, -3, -3, -3, -3, -3, -3,
        -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
        -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
        -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
        -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
        -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
        -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
        -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
        -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
        -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3
]

def asciihex_encode(input,errors='strict', lineLength = 40):
	import array
	
	p = 0
	L = lineLength
	s = ""
	newLine = '\n'
	for c in array.array('B', input):
		if( p >= L ):
			s += newLine
			p = 0
		s += HexTable[ c ]
		p = p+1
	return (s, len(input) )
	
	
def asciihex_decode( input, errors='strict' ):
	import array
	global HtoA_FirstChar, HtoA_SecondChar, HtoA_Whitespace
	s = ""

	d = 0
	HtoA = HtoA_FirstChar
	parity = 0

	for c in array.array('B', input):
		cType = HtoA[c]
		if cType < 0:
			if cType == HtoA_Whitespace:
				continue
			raise Exception( "Encountered unexpected character '%s' in AsciiHex encoded stream" % c )
		if parity == 0:
			d = cType
			HtoA = HtoA_SecondChar
			parity = 1
		else:
			s += CharTable[ d+ cType ]
			HtoA = HtoA_FirstChar
			parity = 0
	if parity == 1:
		raise Exception( "Unexpected end of data in AsciiHex encoded stream" )
	return (s, len(input) )


def process( fname ):
	f = open( fname, 'r' )
	
	e = asciihex_encode( f.read() )[0]
	f2 = open( fname + '.asciihex', 'w' )
	f2.write( e )

	d = asciihex_decode( e )[0]
	f3 = open( fname + '.deasciihex', 'wb' )
	f3.write( d  )
	
	f.close(); f2.close(); f3.close()

if __name__ == "__main__":
	"""
	import sys
	import cProfile
	cProfile.run('process("%s")' % sys.argv[1], sort=1)
"""
	import sys
	f = open( sys.argv[1], 'r' )	
	d = asciihex_decode( f.read() )[0]
	f2 = open( sys.argv[2] , 'w' )
	f2.write( d )
